// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Workout       Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id                 String            @id @default(cuid())
  name               String
  description        String?
  type               ExerciseType
  ExerciseImages     ExerciseImage[]
  ExerciseVideos     ExerciseVideo[]
  ExerciseCategory   ExerciseCategory  @relation(fields: [exerciseCategoryId], references: [id])
  exerciseCategoryId String
  ExerciseWorkout    ExerciseWorkout[]
}

model ExerciseCategory {
  id        String     @id @default(cuid())
  name      String
  exercises Exercise[]
}

enum ExerciseType {
  REPS
  TIME
}

model ExerciseImage {
  id         String   @id @default(cuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  url        String
}

model ExerciseVideo {
  id         String   @id @default(cuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  url        String
}

model Workout {
  id          String            @id @default(cuid())
  name        String
  description String?
  exercises   ExerciseWorkout[]
  user        User              @relation(fields: [userId], references: [id])
  userId      String
}

model ExerciseWorkout {
  id         String      @id @default(cuid())
  exercise   Exercise    @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  workout    Workout     @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  String
  sets       Int?
  reps       Int?
  time       Int?
  weight     Int?
  weightUnit WeightUnit?
}

enum WeightUnit {
  KG
  LB
}
